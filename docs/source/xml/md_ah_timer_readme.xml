<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md_ah_timer_readme" kind="page">
    <compoundname>md_ah_timer_readme</compoundname>
    <title>ah_timer_readme</title>
    <detaileddescription>
<para>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD <heading level="1">cppm</heading>
</para><para><heading level="1">cppm (C++ Minus) is a set of data structures that sit right in between the power of C++ and the economy of C </heading>
</para><para><heading level="1">AH Timer Class</heading>
</para><para>By Alex Hagen</para><para>The AH Timer class provides a linux supported C++ class for using interrupts to emit signals resonably accurately. By using slots and connecting those slots to the signals emitted from the timer class, actions can be triggered at the interrupt priority level at times accurate to within several milliseconds.</para><para><heading level="2">Contents</heading>
</para><para><orderedlist>
<listitem><para>Installation</para></listitem><listitem><para>Usage</para></listitem><listitem><para>To Do</para></listitem></orderedlist>
</para><para><heading level="2">1. Installation</heading>
</para><para>Installation of the AH Timer library is easy, simply download the contents of this library and unpack them (excluding the readme and tests) into the folder you&apos;re compiling out of.</para><para><heading level="2">2. Usage</heading>
</para><para>Follow the steps below to use the AH Timer library.<itemizedlist>
<listitem><para>Lets say we have a class that needs to do something at a certain time. For the sake of example, we&apos;ll use the following bomb:</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>in<sp/>file<sp/>bomb.h</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ah_timer.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;sigslot.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>bomb<sp/>:<sp/>public<sp/>sigslot::has_slots&lt;&gt;{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>must<sp/>inherit<sp/>slot<sp/>properties<sp/>from<sp/>sigslot</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>functions<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bomb(void);<sp/>//<sp/>our<sp/>constructor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>explode(void);<sp/>//<sp/>the<sp/>actual<sp/>bang</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>interval(void);<sp/>//<sp/>showing<sp/>interval<sp/>functionality</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*<sp/>objects<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timer<sp/>*t;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bomb::bomb(void){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>we<sp/>want<sp/>to<sp/>create<sp/>a<sp/>timer<sp/>that<sp/>will<sp/>go<sp/>off<sp/>at<sp/>a<sp/>certain<sp/>time</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>new<sp/>timer();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>we<sp/>now<sp/>set<sp/>the<sp/>first<sp/>fire<sp/>to<sp/>be<sp/>in<sp/>3.5<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;set(3.5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>we<sp/>have<sp/>to<sp/>connect<sp/>our<sp/>bang<sp/>to<sp/>the<sp/>timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;sig-&gt;connect(this,&amp;bomb::explode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>now<sp/>we<sp/>have<sp/>to<sp/>start<sp/>the<sp/>timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;start();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>bomb:explode(void){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>tell<sp/>everybody<sp/>that<sp/>we<sp/>exploded</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;BOOM!\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>using<sp/>built<sp/>in<sp/>diagnostics,<sp/>we<sp/>can<sp/>see<sp/>how<sp/>much<sp/>time<sp/>it<sp/>actually<sp/>took</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Bomb<sp/>went<sp/>off<sp/>after<sp/>%f<sp/>seconds.\n&quot;,t-&gt;realtime);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>bomb::interval(void){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>we<sp/>can<sp/>also<sp/>set<sp/>off<sp/>our<sp/>bomb<sp/>every<sp/>x<sp/>seconds,<sp/>here<sp/>using<sp/>5.25</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>new<sp/>timer();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>we<sp/>have<sp/>to<sp/>set<sp/>the<sp/>interval<sp/>instead<sp/>of<sp/>just<sp/>the<sp/>first<sp/>instance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;set_int(5.25);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>it&apos;s<sp/>already<sp/>connected<sp/>so<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>that,<sp/>but<sp/>we<sp/>must<sp/>start</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;start();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><itemizedlist>
<listitem><para>This class can be run using the following tester</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>in<sp/>file<sp/>test_bomb.cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;bomb.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;stdio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;unistd.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(void){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>tell<sp/>that<sp/>we&apos;re<sp/>running<sp/>the<sp/>bomb</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Setting<sp/>the<sp/>bomb<sp/>to<sp/>go<sp/>off<sp/>after<sp/>3.5<sp/>seconds\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>set<sp/>off<sp/>the<sp/>timer<sp/>and<sp/>bomb</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bomb<sp/>*b<sp/>=<sp/>new<sp/>bomb();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>wait<sp/>until<sp/>bomb<sp/>has<sp/>gone<sp/>off</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>now<sp/>switch<sp/>tacts<sp/>and<sp/>do<sp/>intervals</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Setting<sp/>the<sp/>bomb<sp/>to<sp/>go<sp/>off<sp/>every<sp/>5.25<sp/>seconds\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>use<sp/>our<sp/>function<sp/>to<sp/>make<sp/>it<sp/>go<sp/>off</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>b-&gt;interval();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>wait<sp/>till<sp/>it<sp/>goes<sp/>off<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>wait<sp/>till<sp/>it<sp/>goes<sp/>off<sp/>again</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sleep(6)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>end<sp/>program</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>This can be compiled using (assuming that <ref refid="sigslot_8h_source" kindref="compound">sigslot.h</ref>, bomb.h, and ah_timer.h are in the current directory):</para><para><programlisting><codeline><highlight class="normal">$<sp/>g++<sp/>-std=c++11<sp/>test_bomb.cpp<sp/>-o<sp/>test_bomb</highlight></codeline>
<codeline><highlight class="normal">$<sp/>./test_bomb</highlight></codeline>
</programlisting></para><para><heading level="2">3. To Do</heading>
</para><para><itemizedlist>
<listitem><para>[ ] Windows compatibility (added 10/12/14)</para></listitem><listitem><para>[ ] Different start and interval times functionality (added 10/12/14)</para></listitem><listitem><para>[ ] Better deconstructor (added 10/12/14) <blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para><blockquote><para>timer/master</para></blockquote></para></blockquote></para></blockquote></para></blockquote></para></blockquote></para></blockquote></para></blockquote></para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
