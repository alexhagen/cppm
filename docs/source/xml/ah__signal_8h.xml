<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="ah__signal_8h" kind="file" language="C++">
    <compoundname>ah_signal.h</compoundname>
    <includes local="no">signal.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">errno.h</includes>
    <incdepgraph>
      <node id="19">
        <label>ah_signal.h</label>
        <link refid="ah__signal_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>errno.h</label>
      </node>
      <node id="22">
        <label>unistd.h</label>
      </node>
      <node id="20">
        <label>signal.h</label>
      </node>
      <node id="21">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ah__signal_8h_1ad2efd46b37e5d3976b210c1d20b80b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ah_signal</definition>
        <argsstring>(int _signum, void(*_act)(int))</argsstring>
        <name>ah_signal</name>
        <param>
          <type>int</type>
          <declname>_signum</declname>
        </param>
        <param>
          <type>void(*)(int)</type>
          <declname>_act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ah_signal.h" line="8" column="1" bodyfile="ah_signal.h" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="ah__signal_8h_1a65108affa8e178bdccba0990f8d41002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_group</definition>
        <argsstring>(char *gname)</argsstring>
        <name>set_group</name>
        <param>
          <type>char *</type>
          <declname>gname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ah_signal.h" line="12" column="1" bodyfile="ah_signal.h" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="ah__signal_8h_1af30af395f0c7c192ce62c61141cc6760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int send_signal</definition>
        <argsstring>(int _signal, char *gname)</argsstring>
        <name>send_signal</name>
        <param>
          <type>int</type>
          <declname>_signal</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>gname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ah_signal.h" line="21" column="1" bodyfile="ah_signal.h" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="ah__signal_8h_1aae709b59c272dab2930070b11dc24e75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clean_group</definition>
        <argsstring>(char *gname)</argsstring>
        <name>clean_group</name>
        <param>
          <type>char *</type>
          <declname>gname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ah_signal.h" line="34" column="1" bodyfile="ah_signal.h" bodystart="34" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>ahsignal_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ahsignal_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ah_signal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_signum,</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*_act)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)){</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>signal(_signum,_act);</highlight></codeline>
<codeline lineno="10"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_group(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*gname){</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*ifp;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fname[50];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(fname,</highlight><highlight class="stringliteral">&quot;/usr/share/.%s&quot;</highlight><highlight class="normal">,gname);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>ifp<sp/>=<sp/>fopen(fname,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(ifp,<sp/></highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,getpid());</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(ifp);</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>send_signal(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_signal,</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*gname){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*ifp;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fname[50];</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(fname,</highlight><highlight class="stringliteral">&quot;/usr/share/.%s&quot;</highlight><highlight class="normal">,gname);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>ifp<sp/>=<sp/>fopen(fname,</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_pid;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!feof(ifp)){<sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fscanf<sp/>(ifp,<sp/></highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,<sp/>&amp;_pid);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kill(_pid,_signal);<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(ifp);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clean_group(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*gname){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fname[50];</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(fname,</highlight><highlight class="stringliteral">&quot;/usr/share/.%s&quot;</highlight><highlight class="normal">,gname);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">remove</highlight><highlight class="normal">(fname);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ah_signal.h"/>
  </compounddef>
</doxygen>
