<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classsigslot_1_1__signal__base1" kind="class" language="C++" prot="public">
    <compoundname>sigslot::_signal_base1</compoundname>
    <basecompoundref refid="classsigslot_1_1__signal__base" prot="public" virt="non-virtual">sigslot::_signal_base&lt; mt_policy &gt;</basecompoundref>
    <derivedcompoundref refid="classsigslot_1_1signal1" prot="public" virt="non-virtual">sigslot::signal1&lt; arg1_type, mt_policy &gt;</derivedcompoundref>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>arg1_type</declname>
        <defname>arg1_type</defname>
      </param>
      <param>
        <type>class</type>
        <declname>mt_policy</declname>
        <defname>mt_policy</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsigslot_1_1__signal__base1_1a71527d7cc0fc5363e012e0ef4942caac" prot="public" static="no">
        <type>std::list&lt; <ref refid="classsigslot_1_1__connection__base1" kindref="compound">_connection_base1</ref>&lt; arg1_type, mt_policy &gt; * &gt;</type>
        <definition>typedef std::list&lt;_connection_base1&lt;arg1_type, mt_policy&gt; *&gt; sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::connections_list</definition>
        <argsstring></argsstring>
        <name>connections_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="604" column="1" bodyfile="sigslot.h" bodystart="604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsigslot_1_1__signal__base1_1aa3ca6ddb908412dc9ec5270a9a8d51b8" prot="public" static="no">
        <type>connections_list::const_iterator</type>
        <definition>typedef connections_list::const_iterator sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="605" column="1" bodyfile="sigslot.h" bodystart="605" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsigslot_1_1__signal__base1_1ad7660ad24e4f2760eac5500a3efa6050" prot="public" static="no">
        <type>connections_list::iterator</type>
        <definition>typedef connections_list::iterator sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="606" column="1" bodyfile="sigslot.h" bodystart="606" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classsigslot_1_1__signal__base1_1ac7e77782350e95ad4255c89db2ec229c" prot="protected" static="no" mutable="no">
        <type>connections_list</type>
        <definition>connections_list sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::m_connected_slots</definition>
        <argsstring></argsstring>
        <name>m_connected_slots</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="711" column="1" bodyfile="sigslot.h" bodystart="711" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsigslot_1_1__signal__base1_1a8b53217c6dd9f9e25935d7aeac192914" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::_signal_base1</definition>
        <argsstring>()</argsstring>
        <name>_signal_base1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="608" column="1" bodyfile="sigslot.h" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classsigslot_1_1__signal__base1_1a31b0f787013db310d90094c2c1212fa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::_signal_base1</definition>
        <argsstring>(const _signal_base1&lt; arg1_type, mt_policy &gt; &amp;s)</argsstring>
        <name>_signal_base1</name>
        <param>
          <type>const <ref refid="classsigslot_1_1__signal__base1" kindref="compound">_signal_base1</ref>&lt; arg1_type, mt_policy &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="613" column="1" bodyfile="sigslot.h" bodystart="613" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="classsigslot_1_1__signal__base1_1a68eaa2931d85e984ab128c937d3319ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::slot_duplicate</definition>
        <argsstring>(const has_slots&lt; mt_policy &gt; *oldtarget, has_slots&lt; mt_policy &gt; *newtarget)</argsstring>
        <name>slot_duplicate</name>
        <reimplements refid="classsigslot_1_1__signal__base_1abaca2055066d9c79526fbb9399db1667">slot_duplicate</reimplements>
        <param>
          <type>const <ref refid="classsigslot_1_1has__slots" kindref="compound">has_slots</ref>&lt; mt_policy &gt; *</type>
          <declname>oldtarget</declname>
        </param>
        <param>
          <type><ref refid="classsigslot_1_1has__slots" kindref="compound">has_slots</ref>&lt; mt_policy &gt; *</type>
          <declname>newtarget</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="629" column="1" bodyfile="sigslot.h" bodystart="629" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="classsigslot_1_1__signal__base1_1af9c13bc064f6fabf22bb58563fab35c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::~_signal_base1</definition>
        <argsstring>()</argsstring>
        <name>~_signal_base1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="646" column="1" bodyfile="sigslot.h" bodystart="646" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="classsigslot_1_1__signal__base1_1a6018a46b416a9df4b7818d02ca09ac44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::disconnect_all</definition>
        <argsstring>()</argsstring>
        <name>disconnect_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="651" column="1" bodyfile="sigslot.h" bodystart="651" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classsigslot_1_1__signal__base1_1ac8e9595f90b08025146b70d36b612b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::disconnect</definition>
        <argsstring>(has_slots&lt; mt_policy &gt; *pclass)</argsstring>
        <name>disconnect</name>
        <param>
          <type><ref refid="classsigslot_1_1has__slots" kindref="compound">has_slots</ref>&lt; mt_policy &gt; *</type>
          <declname>pclass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="668" column="1" bodyfile="sigslot.h" bodystart="668" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="classsigslot_1_1__signal__base1_1a62bebb3aa28d822b2fb7c93f76c85ffd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;::slot_disconnect</definition>
        <argsstring>(has_slots&lt; mt_policy &gt; *pslot)</argsstring>
        <name>slot_disconnect</name>
        <reimplements refid="classsigslot_1_1__signal__base_1a7fb7fd35c24e371a3eee667a68294c9f">slot_disconnect</reimplements>
        <param>
          <type><ref refid="classsigslot_1_1has__slots" kindref="compound">has_slots</ref>&lt; mt_policy &gt; *</type>
          <declname>pslot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="sigslot.h" line="688" column="1" bodyfile="sigslot.h" bodystart="688" bodyend="707"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="92">
        <label>sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;</label>
        <link refid="classsigslot_1_1__signal__base1"/>
        <childnode refid="93" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>mt_policy</label>
      </node>
      <node id="95">
        <label>sigslot::signal1&lt; arg1_type, mt_policy &gt;</label>
        <link refid="classsigslot_1_1signal1"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="93">
        <label>sigslot::_signal_base&lt; mt_policy &gt;</label>
        <link refid="classsigslot_1_1__signal__base"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="96">
        <label>sigslot::_signal_base1&lt; arg1_type, mt_policy &gt;</label>
        <link refid="classsigslot_1_1__signal__base1"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="98">
        <label>mt_policy</label>
      </node>
      <node id="97">
        <label>sigslot::_signal_base&lt; mt_policy &gt;</label>
        <link refid="classsigslot_1_1__signal__base"/>
        <childnode refid="98" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="sigslot.h" line="602" column="1" bodyfile="sigslot.h" bodystart="601" bodyend="712"/>
    <listofallmembers>
      <member refid="classsigslot_1_1__signal__base1_1a8b53217c6dd9f9e25935d7aeac192914" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>_signal_base1</name></member>
      <member refid="classsigslot_1_1__signal__base1_1a31b0f787013db310d90094c2c1212fa7" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>_signal_base1</name></member>
      <member refid="classsigslot_1_1__signal__base1_1a71527d7cc0fc5363e012e0ef4942caac" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>connections_list</name></member>
      <member refid="classsigslot_1_1__signal__base1_1aa3ca6ddb908412dc9ec5270a9a8d51b8" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>const_iterator</name></member>
      <member refid="classsigslot_1_1__signal__base1_1ac8e9595f90b08025146b70d36b612b09" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>disconnect</name></member>
      <member refid="classsigslot_1_1__signal__base1_1a6018a46b416a9df4b7818d02ca09ac44" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>disconnect_all</name></member>
      <member refid="classsigslot_1_1__signal__base1_1ad7660ad24e4f2760eac5500a3efa6050" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>iterator</name></member>
      <member refid="classsigslot_1_1__signal__base1_1ac7e77782350e95ad4255c89db2ec229c" prot="protected" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>m_connected_slots</name></member>
      <member refid="classsigslot_1_1__signal__base1_1a62bebb3aa28d822b2fb7c93f76c85ffd" prot="public" virt="virtual"><scope>sigslot::_signal_base1</scope><name>slot_disconnect</name></member>
      <member refid="classsigslot_1_1__signal__base1_1a68eaa2931d85e984ab128c937d3319ea" prot="public" virt="virtual"><scope>sigslot::_signal_base1</scope><name>slot_duplicate</name></member>
      <member refid="classsigslot_1_1__signal__base1_1af9c13bc064f6fabf22bb58563fab35c1" prot="public" virt="non-virtual"><scope>sigslot::_signal_base1</scope><name>~_signal_base1</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
